Add plugin to pick up search criteria from targeted text fields
search through previously browsed content
Write a browser plugin that allows you to search through previously browsed content
Write the plugin for Firefox, Google Chrome and IE
First need to come up with a good server side database schema for storing keywords and a URL

filipino - tandaan
icelandic - muna
maltese - ftakar
swahili - kumbuka
welsh - cofio or gofio


icelandic - leit (search)

zapamiti

XBSDB only allows one select statement per database (too bad)
jStorage for in browser database and persistance (does not support querying the data at all)
TaffyDB - does not support joins directly across instances of the TaffyDB, this still might work by just
          having a non-normalized database so that the keywords are duplicated for each individual URL
www.javascriptdatabase.com - MS Access and ASP centric and old as well
SQLite - part of older W3C spec and is not really supported anymore
IndexedDB - part of the HTML5 spec



*************************************************************************************************
** Best Option
*************************************************************************************************
IndexedDB - part of the HTML5 spec


**************************************************************************************
** IndexedDB - Open and setup a database
**************************************************************************************
var request = window.indexedDB.open("CandyDB",
                                    "My candy store database");
request.onsuccess = function(event) {
  var db = event.result;
  if (db.version != "1") {
    // User's first visit, initialize database.
    var createdObjectStoreCount = 0;
    var objectStores = [
      { name: "kids", keyPath: "id", autoIncrement: true },
      { name: "candy", keyPath: "id", autoIncrement: true },
      { name: "candySales", keyPath: "", autoIncrement: true }
    ];
 
    function objectStoreCreated(event) {
      if (++createdObjectStoreCount == objectStores.length) {
        db.setVersion("1").onsuccess = function(event) {
          loadData(db);
        };
      }
    }
 
    for (var index = 0; index < objectStores.length; index++) {
      var params = objectStores[index];
      request = db.createObjectStore(params.name, params.keyPath,
                                     params.autoIncrement);
      request.onsuccess = objectStoreCreated;
    }
  }
  else {
    // User has been here before, no initialization required.
    loadData(db);
  }
};




**************************************************************************************
** IndexedDB - Store data in database
**************************************************************************************
var kids = [
  { name: "Anna" },
  { name: "Betty" },
  { name: "Christine" }
];
 
var request = window.indexedDB.open("CandyDB",
                                    "My candy store database");
request.onsuccess = function(event) {
  var objectStore = event.result.objectStore("kids");
  for (var index = 0; index < kids.length; index++) {
    var kid = kids[index];
    objectStore.add(kid).onsuccess = function(event) {
      document.getElementById("display").textContent =
        "Saved record for " + kid.name + " with id " + event.result;
    };
  }
};




**************************************************************************************
** IndexedDB - Query data from database
**************************************************************************************
var request = window.indexedDB.open("CandyDB",
                                    "My candy store database");
request.onsuccess = function(event) {
  // Enumerate the entire object store.
  request = event.result.objectStore("kids").openCursor();
  request.onsuccess = function(event) {
    var cursor = event.result;
    // If cursor is null then we've completed the enumeration.
    if (!cursor) {
      return;
    }
    var element = document.createElement("div");
    element.textContent = cursor.value.name;
    document.getElementById("kidList").appendChild(element);
    cursor.continue();
  };
};






var html5rocks = {};
var indexedDB = window.indexedDB || window.webkitIndexedDB ||
                window.mozIndexedDB;

if ('webkitIndexedDB' in window) {
  window.IDBTransaction = window.webkitIDBTransaction;
  window.IDBKeyRange = window.webkitIDBKeyRange;
}

html5rocks.indexedDB = {};
html5rocks.indexedDB.db = null;

html5rocks.indexedDB.onerror = function(e) {
  console.log(e);
};

html5rocks.indexedDB.open = function() {
  var request = indexedDB.open("todos");

  request.onsuccess = function(e) {
    var v = "1.98";
    html5rocks.indexedDB.db = e.target.result;
    var db = html5rocks.indexedDB.db;
    // We can only create Object stores in a setVersion transaction;
    if (v!= db.version) {
      var setVrequest = db.setVersion(v);

      // onsuccess is the only place we can create Object Stores
      setVrequest.onfailure = html5rocks.indexedDB.onerror;
      setVrequest.onsuccess = function(e) {
        if(db.objectStoreNames.contains("todo")) {
          db.deleteObjectStore("todo");
        }

        var store = db.createObjectStore("todo",
          {keyPath: "timeStamp"});

        html5rocks.indexedDB.getAllTodoItems();
      };
    }
    else {
      html5rocks.indexedDB.getAllTodoItems();
    }
  };

  request.onfailure = html5rocks.indexedDB.onerror;
}

html5rocks.indexedDB.addTodo = function(todoText) {
  var db = html5rocks.indexedDB.db;
  var trans = db.transaction(["todo"], IDBTransaction.READ_WRITE, 0);
  var store = trans.objectStore("todo");

  var data = {
    "text": todoText,
    "timeStamp": new Date().getTime()
  };

  var request = store.put(data);

  request.onsuccess = function(e) {
    html5rocks.indexedDB.getAllTodoItems();
  };

  request.onerror = function(e) {
    console.log("Error Adding: ", e);
  };
};

html5rocks.indexedDB.deleteTodo = function(id) {
  var db = html5rocks.indexedDB.db;
  var trans = db.transaction(["todo"], IDBTransaction.READ_WRITE, 0);
  var store = trans.objectStore("todo");

  var request = store.delete(id);

  request.onsuccess = function(e) {
    html5rocks.indexedDB.getAllTodoItems();
  };

  request.onerror = function(e) {
    console.log("Error Adding: ", e);
  };
};

html5rocks.indexedDB.getAllTodoItems = function() {
  var todos = document.getElementById("todoItems");
  todos.innerHTML = "";

  var db = html5rocks.indexedDB.db;
  var trans = db.transaction(["todo"], IDBTransaction.READ_WRITE, 0);
  var store = trans.objectStore("todo");

  // Get everything in the store;
  var keyRange = IDBKeyRange.lowerBound(0);
  var cursorRequest = store.openCursor(keyRange);

  cursorRequest.onsuccess = function(e) {
    var result = e.target.result;
    if(!!result == false)
      return;

    renderTodo(result.value);
    result.continue();
  };

  cursorRequest.onerror = html5rocks.indexedDB.onerror;
};

function renderTodo(row) {
  var todos = document.getElementById("todoItems");
  var li = document.createElement("li");
  var a = document.createElement("a");
  var t = document.createTextNode(row.text);

  a.addEventListener("click", function() {
    html5rocks.indexedDB.deleteTodo(row.timeStamp);
  }, false);

  a.textContent = " [Delete]";
  li.appendChild(t);
  li.appendChild(a);
  todos.appendChild(li)
}

function addTodo() {
  var todo = document.getElementById("todo");
  html5rocks.indexedDB.addTodo(todo.value);
  todo.value = "";
}

function init() {
  html5rocks.indexedDB.open();
}

window.addEventListener("DOMContentLoaded", init(), false);







Allow a google login or a facebook login or an openid login to identify the person when needed


use Ctrl + Shift + F to activate mysearch anywhere in the browser (need to pick a reasonable
location, maybe top right corner of currently loaded Browser document), it will be a floating
text field with a search dropdown...., the ESC (escape) key will dismiss it or a mouse click
outside of the mysearch area will dismiss it or by selecting an item in the dropdown will dismiss it,
a mouse click in the text field will move the cursor to that position in the text field



This is how to keep the div always visible in newer browsers:
<style style="text/css">
#staticcontent{
position:fixed;
left: 10px;
top: 5px;
}
</style>

<div id="staticcontent" style="width: 135px">
This content stays perfectly static on the screen, but only in Firefox.
As of IE6, IE doesn't support it.
</div>





This is the html and javascript for keeping a div always visible in the page
for older browsers
<div id="staticcontent" style="position:absolute; border:1px solid black; background-color: lightyellow; width: 135px;">
This content stays afloat and always in view, even if you scroll the page.
</div>


<script type="text/javascript">
//define universal reference to "staticcontent"
var crossobj=document.all? document.all.staticcontent : document.getElementById("staticcontent")

//define reference to the body object in IE
var iebody=(document.compatMode && document.compatMode != "BackCompat")? document.documentElement : document.body

function positionit(){
//define universal dsoc left point
var dsocleft=document.all? iebody.scrollLeft : pageXOffset
//define universal dsoc top point
var dsoctop=document.all? iebody.scrollTop : pageYOffset

//if the user is using IE 4+ or Firefox/ NS6+
if (document.all||document.getElementById){
crossobj.style.left=parseInt(dsocleft)+5+"px"
crossobj.style.top=dsoctop+5+"px"
}
}
setInterval("positionit()",100)
</script>




-------------------------------------------------------------------------------------------------------------------

When you have a java variable declared, how do you get the normalized JSON string that
represents the java variable?

Now take that normalized JSON string and convert it to java source code for a java
object that when instantiated will then be serialized to that exact same JSON string.

See what has already be done in the tech space of serializing java object to JSON and
deserializing JjsonifySON to java object. You should be able to start with either a javascript
variable and get java source code or a java object and get javascript JSON. 
 
Find the already existing .js libraries that can take a javascript variable and give back the
corresponding .java annotated source code that will serialize into the javascript variable
when instantiated and passed to a java2JSON serializer

Also, find the already existing .java libraries that can take an annotated java object and
serialize it into a JSON string such that it is represented as expected in the javascript
as a javascript variable

Make it so that you can define a Java class with an annotation that will automatically JSONify the
Java object into a JSON string which can be used in the browser, and also, create a tool that
can take a javascript .js file variable and JSONify the variable to a JSON string which can then
be converted into an annotated Java object which will give the same javascript variable data structure
when that Java object is JSONified!





----------------------------------------------------------------------------------------------------------------
// load a sequence of pages and make it so that each page
// loads completely before the subsequent page loads

1) DONE -- The mymashup.js file should only load the .js files to be used for executing the page sequence
2) There should be one kernel.js javascript that defines the URLHandler (GetURL) javascript object.
   The URLHandler javascript object must also support waiting a specified time duration before
   loading the next URL - this is useful for plugins like the PDF plugin that reports the page has
   already loaded but the actual content still has not loaded. There also needs to be a
   looping capability so that a given sequence of WebScreens and be looped over several times.
   There should also be a timing facility to cause the URLHandler object to wait until a particular
   time of day before it starts the WebScreen sequence.
3) Each other .js file defines a sequence of WebScreens and situational processing logic.
   These individual .js files MUST also contain their own startup methods that can be
   invoked via "repl.<methodName>()" with parameters being passed in if needed.

   